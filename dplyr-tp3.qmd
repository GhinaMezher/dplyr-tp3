---
title: "Dplyr TP3"
author: "Ghina Mezher"
message: false
echo: false
format: html
---

Before starting the exercise, we must define our directory, call all the libraries used during our lab, and attribute the data set we have downloaded to the variable "spotify".

The repository link is : https://github.com/GhinaMezher/dplyr-tp3.git


```{r, message=FALSE, echo=FALSE, warning=FALSE}
library(here)
here::i_am("dplyr-tp3.Rproj")
library(tidyr)
library(dplyr)
library(ggplot2)
spotify<-spotify <- readRDS("top-spotify-hits-2000-2019 (1).Rds")
```
## Exercise 1
### Question 1

The data set contains `r count(spotify %>% distinct (song))` songs, `r count(spotify %>% distinct (artist))` artists and `r count(spotify %>% distinct (genre))` genres. 

## Question 2
```{r}
spotify|>
  distinct (year, song)|>
  count(year)|>
  rename("Number of songs"=n)|>
  knitr::kable()
```
The table here gives us the number of songs for each year. The function count helps us get rid of duplicates. 

### Question 3
```{r}
result<-spotify|>
  distinct (song, artist)|>
  count(artist)|>
  slice_max(n)
result
```
The artist with the largest amount of songs in the database (Tuesday's database) is `r result[1]` with `r result[2]` songs. the function count(artist) helps us count each song once and not get confused with duplicates on the chart.

### Question 4
```{r}
c<-spotify|>  
  distinct(song,genre,tempo,keep_all=TRUE)|>
  group_by(genre)|>
  summarise(mean(tempo),median(tempo),max(tempo),min(tempo),n())

knitr::kable(c)
```
The table here shows us the minimum, maximum, mean and median bpm and the number of songs according to the musical genre.

The function group_by(genre) helps us group the values for the avraibles we have selected (with distinct) according to the musical genre.
Summarise calculates the values we want to put into our table and knitr::kable(c) takes the summarise values (implemented into the c variable) and puts them in a clean and clear teable.

### Question 5
```{r}
spotify|>  
  distinct(year,energy,danceability,keep_all=TRUE)|>
  group_by(year)|>
  summarise(median(energy),median(danceability))|>
  knitr::kable()
```
This table represents the median energy and danceability of  songs for each year mentioned in our database.
group_by(year) groups the values of each variable for each year in order to calculate the statistical values requested for each year.

### Question 6
```{r}
spotify|>
  group_by(year)|>
  summarise(med_energy=median(energy),med_dance=median(danceability))|>
  ggplot(aes(x=year))+
  geom_line(aes(y=med_energy),color="blue")+
  geom_line(aes(y=med_dance),color="green")
```
On this graph we can read the evolution of the median energy of songs in blue and in green the evolution of the median danceability of songs. 

## Exercise 2

```{r}
dropout <- readRDS("dropout (3).Rds")
```

### Question 1
```{r}
dropout|>
  distinct(`Age at enrollment`,`Gender`,`Marital status`,keep_all=TRUE)|>
  group_by(`Marital status`,`Gender`)|>
  summarise("Median age"=median(`Age at enrollment`))
```
This table represents the median age at enrollment according to the gender and marital status of the students in our database. 

### Question 2
```{r}
dropout|>
  distinct(`Age at enrollment`,`Gender`,`Marital status`,keep_all=TRUE)|>
  group_by(`Marital status`,`Gender`)|>
  summarise("Median age"=median(`Age at enrollment`))|>
  pivot_wider(names_from=`Gender`,values_from="Median age")|>
  knitr::kable()

```
Here we have a clearer representation of the previous table. For each marital status we can read the median age at enrollment for women and for men. 
This is possible thanks to the function pivot_wider.

### Question 3
```{r}
print(dropout|>
  group_by(`Target`)|>
  summarise(across(starts_with("Curricular units"),mean))) 
```
It is too long to type all variables concerning the Curricular units. By using the across function we are able to include more than one variable without typing them out one by one by sifting through all the variables of the database.
Starts_with helps us give a selection to the selection of variables by across, here the condition is starting with 'Curricular units'. 

We could also attribute the code to a variable, mean_val and then do print(mean_val) in order to reuse it in the rest of our code without typing the question 3 code all over again. 

So we would have : mean_val<-dropout|> ... and then print(mean_val) on the next line

### Question 4
```{r}
dropout|>
  group_by(`Target`)|>
  summarise(across(starts_with("Curricular units"),mean))|> 

#Here we can find the code from Q3, we could also attribute the code in Q3 to a variable named mean_val and call upon it here. 
# The code will then become: mean_val|> pivot_longer ... 

  pivot_longer(starts_with("Curricular units"),names_to="Units")|>
  pivot_wider(names_from=Target)|>
  knitr::kable()

```

The functions pivot_longer and pivot_wider help us organize our table in order to better visualize our data. 
Pivot_wider gives us a table with 3 columns; Target, Units and value. 
Pivot_longer makes the table more readable as each line represents a certain unit. And each unit line has 3 values, one for each type of target (dropout, graduate and enrolled)




